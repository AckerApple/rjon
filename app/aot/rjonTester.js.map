{"version":3,"sources":["../src/rjonTester.ts"],"names":[],"mappings":";;AAAA,uDAA+C;AAC/C,yCAA0C;AAE1C,IAAM,KAAK,GAAG;IACZ,KAAK,EAAC,GAAG;CACV,CAAA;AAED,wBAAwB,OAAO;IAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IAClC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;AACxB,CAAC;AACD,cAAc,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;AAEzD,IAAM,MAAM,GAAG;IACb,KAAK,EAAC,UAAS,CAAC,EAAC,CAAC,EAAC,OAAQ;QACzB,EAAE,CAAA,CAAC,CAAC,IAAE,CAAC,CAAC;YAAA,MAAM,CAAA;QACd,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,OAAO,CAAC,GAAG,IAAI,cAAc,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAC,MAAM,GAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;IACpG,CAAC;CACF,CAAA;AAED;;GAEG;AAEH;IAAA;IAsVA,CAAC;IArVC,+BAA+B;IAE/B;;;;;;MAME;IACF,2BAAU,GAAV,UAAW,MAAM,EAAE,OAAyC;QAA5D,iBAgFC;QA/EC,IAAM,OAAO,GAAG,EAAE,CAAA;QAClB,IAAM,OAAO,GAAG,EAAE,CAAA;QAClB,IAAM,IAAI,GAAG,EAAE,CAAA;QACf,IAAI,YAAY,GAAG,CAAC,CAAA;QAEpB,IAAM,gBAAgB,GAAG,UAAS,IAAI,EAAC,GAAG;YACxC,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,GAAC,IAAI,GAAC,IAAI,CAAC,IAAI,CAAA;YACtC,IAAI,CAAC,IAAI,CAAC,EAAC,GAAG,EAAC,GAAG,EAAC,KAAK,EAAC,GAAG,EAAC,CAAC,CAAA;YAC9B,OAAO,CAAC,GAAG,CAAC,UAAU,GAAC,GAAG,GAAC,SAAS,CAAC,CAAA;YACrC,MAAM,CAAC,GAAG,CAAA;QACZ,CAAC,CAAA;QAED,IAAM,WAAW,GAAG,UAAS,IAAI,EAAC,GAAG;YACnC,mBAAmB;YACnB,EAAE,CAAA,CAAC,GAAG,CAAC,CAAA,CAAC;gBACN,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAClB,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAC,GAAG,CAAC,CAAA;YACnC,CAAC;YAED,EAAE,YAAY,CAAA;YAEd,IAAI,GAAG,GAAG,UAAU,GAAC,KAAK,CAAC,KAAK,GAAC,WAAW,GAAC,IAAI,CAAC,IAAI,GAAC,SAAS,CAAA;YAEhE,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,GAAC,EAAE,CAAC,CAAA,CAAC;gBACf,GAAG,IAAI,YAAY,GAAC,IAAI,CAAC,IAAI,GAAC,YAAY,CAAA;YAC5C,CAAC;YAAA,IAAI,CAAC,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,GAAC,EAAE,CAAC,CAAA,CAAC;gBACrB,GAAG,IAAI,YAAY,GAAC,IAAI,CAAC,IAAI,GAAC,YAAY,CAAA;YAC5C,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YAChB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACpB,CAAC,CAAA;QAED,IAAM,KAAK,GAAG,EAAE,CAAA;QAChB,IAAI,SAAS,GAAG,EAAE,CAAA;QAClB,IAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK;YAC/B,IAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,MAAM,IAAE,OAAA,KAAI,CAAC,SAAS,CAAC,MAAM,EAAC,KAAK,EAAC,OAAO,CAAC,EAApC,CAAoC,CAAC,CAAA;YACjF,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;QAEF,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,KAAK,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAC,CAAC;YACrC,IAAI,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;YAEvB,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAA,CAAC;gBACZ,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAClB,QAAQ,CAAA;YACV,CAAC;YAED,EAAE,CAAA,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;gBAC5B,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;YAC7B,CAAC;QACH,CAAC;QAED,IAAM,IAAI,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,GAAG,KAAK,CAAA;QAEjD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC;aAC1C,IAAI,CAAC;YACJ,OAAO,CAAC,GAAG,EAAE,CAAA;YACb,OAAO,CAAC,GAAG,CAAC,UAAU,GAAC,YAAY,GAAC,iBAAiB,CAAC,CAAA;YACtD,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAC;gBACd,OAAO,CAAC,GAAG,CAAC,UAAU,GAAC,IAAI,CAAC,MAAM,GAAC,iBAAiB,CAAC,CAAA;gBACrD,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG,EAAC,CAAC;oBACjB,OAAO,CAAC,GAAG,EAAE,CAAA;oBACb,OAAO,CAAC,GAAG,CAAC,UAAU,GAAC,GAAG,CAAC,GAAG,GAAC,SAAS,CAAC,CAAA;oBACzC,EAAE,CAAA,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA,CAAC;wBACpB,OAAO,CAAC,GAAG,CAAC,UAAU,GAAC,GAAG,CAAC,KAAK,CAAC,OAAO,GAAC,SAAS,CAAC,CAAA;wBACnD,EAAE,CAAA,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA,CAAC;4BAC/C,OAAO,CAAC,GAAG,CAAC,UAAU,GAAC,GAAG,CAAC,KAAK,CAAC,KAAK,GAAC,SAAS,CAAC,CAAA;wBACnD,CAAC;oBACH,CAAC;oBAAA,IAAI,CAAA,CAAC;wBACJ,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;wBACvB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;wBACtB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;oBACxB,CAAC;gBACH,CAAC,CAAC,CAAA;YACJ,CAAC;YACD,MAAM,CAAC,EAAC,OAAO,EAAC,OAAO,EAAE,OAAO,EAAC,OAAO,EAAC,CAAA;QAC3C,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,CAAC,IAAE,OAAA,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAA;IAC7B,CAAC;IAED,4BAAW,GAAX,UAAY,IAAI;QACd,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,YAAY,GAAC,IAAI,CAAC,IAAI,GAAC,SAAS,CAAC,CAAA;YAC7C,MAAM,CAAA;QACR,CAAC;QAED,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE;aACjB,IAAI,CAAC,UAAA,CAAC,IAAE,OAAA,CAAC,IAAI,CAAC,IAAI,GAAC,IAAI,CAAC,GAAG,EAAE,GAAC,SAAS,CAAC,IAAI,CAAC,EAArC,CAAqC,CAAC,CAAA;IACjD,CAAC;IAED,gCAAe,GAAf,UAAgB,IAAI,EAAE,WAAW;QAC/B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAE;aAC/C,KAAK,CAAC,UAAA,GAAG,IAAE,OAAA,GAAG,EAAH,CAAG,CAAC;aACf,IAAI,CAAC,UAAA,GAAG,IAAE,OAAA,WAAW,CAAC,IAAI,EAAC,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAA;IACnC,CAAC;IAED,6BAAY,GAAZ,UAAa,KAAK,EAAE,WAAW;QAA/B,iBAQC;QAPC,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAA;QAE/B,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YAChB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,cAAI,OAAA,KAAI,CAAC,eAAe,CAAC,IAAI,EAAE,WAAW,CAAC,EAAvC,CAAuC,CAAC,CAAA;QACrE,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,OAAO,CAAA;IAChB,CAAC;IAED,WAAW;IACX;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IAEH,mCAAkB,GAAlB,UAAmB,MAAM,EAAC,KAAK,EAAC,OAAO;QACrC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAA;IACzD,CAAC;IAED;;;;;;MAME;IACF,qCAAoB,GAApB,UAAqB,MAAM,EAAC,KAAK,EAAC,OAAO;QAAzC,iBAqBC;QApBC,EAAE,CAAA,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA,CAAC;YAClB,gCAAgC;YAChC,MAAM,CAAC,cAAM,OAAA,CAAC;gBACZ,WAAW,EAAC,IAAI;gBAChB,UAAU,EAAC,GAAG;gBACd,OAAO,EAAC;oBACN,cAAc,EAAC,kBAAkB;iBAClC;gBACD,IAAI,EAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC;aACrC,CAAC,EAPW,CAOX,CAAA;QACJ,CAAC;QAED,MAAM,CAAC;YACL,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAA;YAC3C,IAAM,OAAO,GAAG,KAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAA,CAAA,QAAQ;YACvE,IAAM,QAAQ,GAAG,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA,CAAA,iBAAiB;YAExE,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAE,QAAQ,CAAE,CAAA,kCAAkC;iBAC1E,IAAI,CAAE,KAAI,CAAC,uBAAuB,CAAC,KAAK,EAAC,MAAM,CAAC,CAAE,CAAA;QACrD,CAAC,CAAA;IACH,CAAC;IAED,wCAAuB,GAAvB,UAAwB,KAAK,EAAC,MAAM;QAClC,IAAM,UAAU,GAAG,MAAM,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;QAE3D,MAAM,CAAC,UAAS,GAAG;YACjB,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAA;YACnB,IAAI,WAAW,GAAG,EAAE,CAAA;YACpB,IAAM,QAAQ,GAAG,EAAE,CAAA;YAEnB,aAAa;YACb,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAA,CAAC;gBAC1B,EAAE,CAAA,CAAC,GAAG,CAAC,WAAW,EAAE,IAAE,cAAc,CAAC,CAAA,CAAC;oBACpC,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;oBAC9B,KAAK,CAAC;gBACR,CAAC;YACH,CAAC;YAED,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,KAAK,CAAA;YAChE,IAAM,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,CAAA;YAEnC,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC;gBACpB,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAE,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAC5F,QAAQ,CAAC,IAAI,CAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAC,GAAG,CAAC,CAAE,CAAA;YAC5C,CAAC;YAED,EAAE,CAAA,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAE,CAAC,CAAC,CAAA,CAAC;gBAC7D,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACzB,CAAC;YAED,EAAE,CAAA,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA,CAAC;gBACnB,IAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,WAAW,EAAE,CAAA;gBACjD,MAAM,CAAA,CAAC,UAAU,CAAC,CAAA,CAAC;oBACjB,KAAK,OAAO;wBACV,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAC,+CAA+C,GAAC,IAAI,CAAC,WAAW,CAAC,CAAA;wBACtG,KAAK,CAAC;oBAER,KAAK,QAAQ,CAAC;oBACd,KAAK,QAAQ,CAAC;oBACd,KAAK,SAAS,CAAC;oBACf,KAAK,QAAQ;wBACX,MAAM,CAAC,KAAK,CAAC,OAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,gCAAgC,GAAC,UAAU,GAAC,YAAY,GAAC,OAAM,CAAC,IAAI,CAAC,CAAC,CAAA;wBAC7G,KAAK,CAAC;oBAER;wBACE,IAAM,gBAAgB,GAAG,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,IAAE,CAAC,CAAA;wBAC1D,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,EAAE,gCAAgC,GAAC,UAAU,GAAC,YAAY,GAAC,WAAW,CAAC,CAAA;gBAC9G,CAAC;YACH,CAAC;YAED,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,IAAI,GAAG,CAAA;YAChD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAA;YAExC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAE,QAAQ,CAAE,CAAC,IAAI,CAAC,cAAK,CAAC,CAAC,CAAA;QAC7C,CAAC,CAAA;IACH,CAAC;IAED,0BAAS,GAAT,UAAU,KAAK,EAAE,GAAG;QAClB,IAAM,QAAQ,GAAG,EAAE,CAAA;QACnB,GAAG,CAAA,CAAC,IAAI,KAAK,GAAC,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,KAAK,EAAC,CAAC;YAC9C,QAAQ,CAAC,IAAI,CAAE,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAE,CAAA;QAC5C,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC9B,CAAC;IAED,gCAAe,GAAf,UAAgB,OAAO,EAAC,OAAO;QAC7B,MAAM,CAAC,UAAS,QAAQ;YACtB,IAAM,YAAY,GAAG,UAAS,GAAG,EAAC,CAAE;gBAClC,QAAQ,CAAC,GAAG,EAAC,CAAC,CAAC,CAAA;gBACf,QAAQ,GAAG,cAAW,CAAC,CAAA,CAAA,sCAAsC;YAC/D,CAAC,CAAA;YAED,UAAU,CAAC;gBACT,IAAM,GAAG,GAAG,IAAI,KAAK,CAAC,oBAAoB,GAAC,OAAO,GAAC,gHAAgH,CAAC,CAAA;gBACpK,GAAG,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAA;gBAC5B,YAAY,CAAC,GAAG,CAAC,CAAA;YACnB,CAAC,EAAE,OAAO,CAAC,CAAA;YAEX,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;iBACvB,IAAI,CAAC,UAAA,CAAC,IAAE,OAAA,YAAY,CAAC,IAAI,EAAC,CAAC,CAAC,EAApB,CAAoB,CAAC;iBAC7B,KAAK,CAAC,UAAA,CAAC,IAAE,OAAA,YAAY,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CAAA;QAC5B,CAAC,CAAA;IACH,CAAC;IAED,0BAAS,GAAT,UAAU,MAAM,EAAE,KAAK,EAAE,OAAO;QAC9B,IAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAC,KAAK,EAAC,OAAO,CAAC,CAAA;QAC5D,IAAM,UAAU,GAAG,MAAM,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;QAC3D,IAAM,OAAO,GAAG,CAAC,KAAK,CAAC,MAAM,IAAE,KAAK,CAAC,GAAC,GAAG,GAAC,OAAO,CAAC,IAAI,GAAC,UAAU,CAAA;QAEjE,EAAE,CAAA,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;YAAA,MAAM,CAAC;QAEvB,EAAE,CAAA,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,IAAE,OAAO,CAAC,MAAM,CAAC,CAAA,CAAC;YACjD,MAAM,CAAC;QACT,CAAC;QAED,MAAM,CAAC,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,OAAO,EAAC,MAAM,EAAC,MAAM,EAAC,CAAA;IAC/C,CAAC;IAEa,yBAAkB,GAAhC,UAAiC,KAAK,EAAC,MAAuD;QAAvD,uBAAA,EAAA,WAAiC,IAAI,EAAC,IAAI,EAAC,MAAM,EAAC,IAAI,EAAC;QAC5F,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAA;QAC1C,EAAE,CAAA,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,CAAC;YAChB,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAA,CAAC;gBAC5B,IAAI,IAAI,GAAG,IAAI,MAAM,CAAC,GAAG,GAAC,GAAG,EAAE,IAAI,CAAC,CAAA;gBACpC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;YAC3D,CAAC;QACH,CAAC;QACD,MAAM,CAAC,UAAU,CAAA;IACnB,CAAC;IAEa,0BAAmB,GAAjC,UAAkC,MAAM;QACtC,IAAI,QAAQ,GAAG,KAAK,CAAA;QACpB,IAAM,KAAK,GAAG,EAAE,CAAA;QAChB,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;YACvC,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;gBACZ,QAAQ,GAAG,IAAI,CAAA;gBACf,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACzB,CAAC;YACD,EAAE,CAAA,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC;gBAAA,MAAM,CAAA;YAE/B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAClB,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;IAEa,oBAAa,GAA3B,UAA4B,MAAM;QAChC,IAAM,KAAK,GAAG,EAAE,CAAA;QAChB,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;YAClB,mBAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM;gBAChC,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC;oBAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;YACxC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;IAEa,yBAAkB,GAAhC,UAAiC,MAAM;QACrC,IAAM,KAAK,GAAG,EAAE,CAAA;QAChB,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;YAClB,mBAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM;gBAChC,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC;oBAAA,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;IAEa,+BAAwB,GAAtC,UAAuC,MAAM;QAC3C,IAAI,QAAQ,GAAG,KAAK,CAAA;QACpB,IAAM,KAAK,GAAG,EAAE,CAAA;QAChB,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;YAC7C,mBAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM;gBAChC,EAAE,CAAA,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;oBAAA,MAAM,CAAA;gBAEtB,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;oBACnB,QAAQ,GAAG,IAAI,CAAA;oBACf,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAC1B,CAAC;gBACD,EAAE,CAAA,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;oBAAA,MAAM,CAAA;gBAEtC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACnB,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;IACH,aAAC;AAAD,CAtVA,AAsVC,IAAA;AAtVY,wBAAM","file":"rjonTester.js","sourceRoot":"","sourcesContent":["import { array } from \"ack-angular/pipes.class\"\nimport * as ack from \"ack-x/index-browser\"\n\nconst icons = {\n  check:'✓'\n}\n\nfunction AssertionError(message){\n  this.name = this.constructor.name;\n  this.message = message\n}\nAssertionError.prototype = Object.create(Error.prototype)\n\nconst assert = {\n  equal:function(a,b,message?){\n    if(a==b)return\n    throw message ? new AssertionError(message) : new AssertionError(a.toString()+' == '+b.toString())\n  }\n}\n\n/*if (process.platform === 'win32') {\n  icons.check = '\\u221A';\n}*/\n\nexport class Tester{\n  //public requestSampleRoute:any\n\n  /**\n    @options{\n      port - what port to conduct test on\n      method - limit tests to only matching methods\n      host - server address\n    }\n  */\n  testRoutes(routes, options:{port:number|string, host:string}){\n    const passing = []\n    const failing = []\n    const errs = []\n    let successCount = 0\n\n    const processTestError = function(test,err){\n      const msg = errs.length+') '+test.name\n      errs.push({msg:msg,error:err})\n      console.log('\\x1b[31m'+msg+'\\x1b[0m')\n      return err\n    }\n\n    const processTest = function(test,err){\n      //if(err)return err\n      if(err){\n        failing.push(test)\n        return processTestError(test,err)\n      }\n\n      ++successCount\n\n      let msg = '\\x1b[32m'+icons.check+' \\x1b[90m'+test.name+'\\x1b[0m'\n      \n      if(test.time>75){\n        msg += ' \\x1b[31m('+test.time+'ms)\\x1b[0m'\n      }else if(test.time>37){\n        msg += ' \\x1b[33m('+test.time+'ms)\\x1b[0m'\n      }\n\n      console.log(msg)\n      passing.push(test)\n    }\n\n    const tests = []\n    let onlyArray = []\n    const promises = routes.map(route=>{\n      const routeTests = route.sample.map(sample=>this.mapSample(sample,route,options))\n      tests.push.apply(tests, routeTests)\n    })\n\n    for(let x=tests.length-1; x >= 0; --x){\n      let testMeta = tests[x]\n\n      if(!testMeta){\n        tests.splice(x, 1)\n        continue\n      }\n\n      if(testMeta.sample.test.only){\n        onlyArray.unshift(testMeta)\n      }\n    }\n\n    const runs = onlyArray.length ? onlyArray : tests\n\n    return this.runTestCases(runs, processTest)\n    .then(()=>{\n      console.log()\n      console.log('\\x1b[32m'+successCount+' passing\\x1b[0m')\n      if(errs.length){\n        console.log('\\x1b[31m'+errs.length+' failing\\x1b[0m')\n        errs.forEach((err,i)=>{\n          console.log()\n          console.log('\\x1b[32m'+err.msg+'\\x1b[0m')\n          if(err.error.message){        \n            console.log('\\x1b[31m'+err.error.message+'\\x1b[0m')\n            if(err.error.stack && !err.error.isTimeoutError){\n              console.log('\\x1b[90m'+err.error.stack+'\\x1b[0m')\n            }\n          }else{\n            console.log('\\x1b[31m')\n            console.log(err.error)\n            console.log('\\x1b[0m')\n          }\n        })\n      }\n      return {passing:passing, failing:failing}\n    })\n    .catch(e=>console.error(e))\n  }\n\n  runTestCase(test){\n    if(test.sample.test.skip){\n      console.log('\\x1b[36m- '+test.name+'\\x1b[0m')\n      return\n    }\n\n    const startTime = Date.now()\n    return test.test()\n    .then(x=>(test.time=Date.now()-startTime) && x)\n  }\n\n  promiseTestCase(test, processTest){\n    return Promise.resolve( this.runTestCase(test) )\n    .catch(err=>err)\n    .then(err=>processTest(test,err))\n  }\n\n  runTestCases(tests, processTest){\n    let promise = Promise.resolve()\n\n    tests.forEach(test=>{\n      promise = promise.then(()=>this.promiseTestCase(test, processTest))\n    })\n    \n    return promise\n  }\n\n  //HOLD ONTO\n  /*ackRequestSampleRoute(sample, route, options){\n    options = options || {}\n    options.host = options.host || 'localhost'\n\n    const simplePath = this.getRouteSamplePath(route, sample)\n\n    const req = ack.req()\n\n    if(sample.post){\n      req.postVar(sample.post)\n    }\n\n    if(route.method){\n      req.method(route.method)\n    }\n\n    if(sample.request){\n      req.json(result)\n    }\n\n    const urlPath = 'http://'+options.host+':'+options.port + simplePath\n\n    //send request\n    return req.send(urlPath,{spread:false})\n    .then(this.testRouteSampleResponse(route,sample))\n  }*/\n\n  requestSampleRoute(sample,route,options){\n    throw new Error('Expected requestSampleRoute override')\n  }\n\n  /**\n    @options{\n      port - what port to conduct test on\n      method - limit tests to only matching methods\n      host - server address\n    }\n  */\n  getTestBySampleRoute(sample,route,options){    \n    if(sample.response){\n      //foo request by sample.response\n      return () => ({\n        fooResponse:true,\n        statusCode:200,\n        headers:{\n          \"content-type\":\"application/json\"\n        },\n        body:JSON.stringify(sample.response)\n      })\n    }\n\n    return () => {\n      const timeout = sample.test.timeout || 2000\n      const promise = this.requestSampleRoute(sample, route, options)//ignite\n      const callback = this.callbackTimeout(promise, timeout)//wrap in timeout\n\n      return ack.promise().callback( callback )//will resolve or timeout or error\n      .then( this.testRouteSampleResponse(route,sample) )\n    }\n  }\n\n  testRouteSampleResponse(route,sample){\n    const simplePath = Tester.getRouteSamplePath(route, sample)\n\n    return function(res){\n      var body = res.body\n      let contentType = ''\n      const promises = []\n\n      //see if json\n      for(var key in res.headers){\n        if(key.toLowerCase()=='content-type'){\n          contentType = res.headers[key]\n          break;\n        }\n      }\n\n      const method = route.method ? route.method.toUpperCase() : 'GET'\n      const isParseBody = !sample.request\n\n      if(sample.test.cases){\n        const cases = sample.test.cases.constructor==Array ? sample.test.cases : [sample.test.cases]\n        promises.push( this.testCases(cases,res) )\n      }\n\n      if(isParseBody && contentType.search(/application\\/json/i)>=0){\n        body = JSON.parse(body)\n      }\n\n      if(route.returnType){\n        const returnType = route.returnType.toLowerCase()\n        switch(returnType){\n          case 'array':\n            assert.equal(body.constructor, Array,'returnType mismatch. Expected:Array Received:'+body.constructor)\n            break;\n\n          case 'string':\n          case 'number':\n          case 'boolean':\n          case 'object':\n            assert.equal(typeof(body), returnType, 'returnType mismatch. Expected:'+returnType+' Received:'+typeof(body))\n            break;\n\n          default:\n            const contentTypeMatch = contentType.search(returnType)>=0\n            assert.equal(contentTypeMatch, true, 'returnType mismatch. Expected:'+returnType+' Received:'+contentType)\n        }\n      }\n\n      const statusCode = sample.test.statusCode || 200\n      assert.equal(res.statusCode, statusCode)\n\n      return Promise.all( promises ).then(()=>{})\n    }\n  }\n\n  testCases(cases, res){\n    const promises = []\n    for(let index=0; index < cases.length; ++index){\n      promises.push( cases[index](res, assert) )\n    }\n\n    return Promise.all(promises)\n  }\n\n  callbackTimeout(promise,timeout){\n    return function(callback){\n      const killCallback = function(err,x?){\n        callback(err,x)\n        callback = function(){}//all future calls will become ignored\n      }\n\n      setTimeout(function(){\n        const err = new Error('Error: Timeout of '+timeout+'ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.')\n        err['isTimeoutError'] = true\n        killCallback(err)\n      }, timeout)\n\n      Promise.resolve(promise)\n      .then(x=>killCallback(null,x))\n      .catch(e=>killCallback(e))\n    }\n  }\n\n  mapSample(sample, route, options){\n    const test = this.getTestBySampleRoute(sample,route,options)\n    const simplePath = Tester.getRouteSamplePath(route, sample)\n    const itsName = (route.method||'GET')+':'+options.port+simplePath\n\n    if(!sample.test)return;\n\n    if(options.method && route.method!=options.method){\n      return;\n    }\n\n    return {test:test,name:itsName,sample:sample}\n  }\n\n  public static getRouteSamplePath(route,sample:{path:string,params:any}={path:null,params:null}){\n    let simplePath = sample.path || route.path\n    if(sample.params){\n      for(var key in sample.params){\n        let regX = new RegExp(':'+key, 'gi')\n        simplePath = simplePath.replace(regX, sample.params[key])\n      }\n    }\n    return simplePath\n  }\n\n  public static getRouteActualTests(routes){\n    let onlyMode = false\n    const tests = []\n    Tester.getRouteTests(routes).forEach(test=>{\n      if(test.only){\n        onlyMode = true\n        return tests.push(test)\n      }\n      if(onlyMode || test.skip)return\n\n      tests.push(test)\n    })\n    return tests\n  }\n\n  public static getRouteTests(routes){\n    const tests = []\n    routes.forEach(route=>{\n      array(route.sample).forEach(sample=>{\n        if(sample.test)tests.push(sample.test)\n      })\n    })\n    return tests\n  }\n\n  public static getRoutesWithTests(routes){\n    const tests = []\n    routes.forEach(route=>{\n      array(route.sample).forEach(sample=>{\n        if(sample.test)tests.push(route)\n      })\n    })\n    return tests\n  }\n\n  public static getRoutesWithActualTests(routes){\n    let onlyMode = false\n    const tests = []\n    Tester.getRoutesWithTests(routes).forEach(route=>{\n      array(route.sample).forEach(sample=>{\n        if(!sample.test)return\n\n        if(sample.test.only){\n          onlyMode = true\n          return tests.push(route)\n        }\n        if(onlyMode || sample.test.skip)return\n\n        tests.push(route)\n      })\n    })\n    return tests\n  }\n}"]}