{"version":3,"sources":["../src/RjonTester.component.ts"],"names":[],"mappings":"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","file":"RjonTester.component.js","sourceRoot":"","sourcesContent":["import { Http, Response, Request } from '@angular/http';\n\nimport {\n  EventEmitter,\n  Input,\n  Component\n} from '@angular/core'\nimport { AppData } from \"./AppData\"\nimport { string as rjonTester } from \"./templates/rjon-tester.pug\"\nimport { Tester } from \"./rjonTester\"\nimport { fxArray } from \"./prefx\"\n\n\n@Component({\n  selector:'rjon-tester',\n  template:rjonTester,\n  animations:fxArray\n}) export class RjonTester{\n  public testing:boolean = false\n  public testResults = []\n  public testRoutes = []\n  public actualTestRoutes = []\n  public actualRoutes = []\n  public hostModel\n  public myTester = new Tester()\n\n  @Input() public hostModelChange = new EventEmitter()\n\n  constructor(public AppData:AppData, public http:Http){\n    this.myTester.requestSampleRoute = function(sample, route, options){\n      options = options || {}\n      options.host = options.host || 'localhost'\n\n      const simplePath = Tester.getRouteSamplePath(route, sample)\n      const reqops = {\n        method:route.method || 'GET'\n        ,url:'http://'+options.host+':'+options.port + simplePath\n        ,body: sample.request || sample.post\n      }\n\n      //send request\n      return this.http.request(reqops)\n    }\n  }\n\n  ngOnInit(){\n    this.hostModel = this.getDefaultHostModel()\n    return this.AppData.load.then(()=>{\n      if(!this.AppData.rjon || !this.AppData.rjon.routes)return\n      //routes with tests\n      this.testRoutes = Tester.getRouteTests( this.AppData.rjon.routes )\n      \n      //unique tests\n      this.actualTestRoutes = Tester.getRouteActualTests( this.AppData.rjon.routes )\n      \n      //unique routes with ready to use tests\n      this.actualRoutes = Tester.getRoutesWithActualTests( this.AppData.rjon.routes )\n    })\n  }\n\n  getDefaultHostModel(){\n    if(this.hostModel)return this.hostModel\n    \n    if(this.AppData.rjon.hosts && this.AppData.rjon.hosts.length){\n      return this.AppData.rjon.hosts[0]\n    }\n  }\n\n  setHostByIndex(index){\n    this.hostModel = this.AppData.rjon.hosts[index]\n    this.hostModelChange.emit(this.hostModel)\n  }\n\n  runTest(){\n    if(this.testing)return\n\n    this.testing = true\n    return this.myTester.testRoutes(this.AppData.rjon.routes, this.hostModel)\n  }\n}\n"]}