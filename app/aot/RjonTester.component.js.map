{"version":3,"sources":["../src/RjonTester.component.ts"],"names":[],"mappings":"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","file":"RjonTester.component.js","sourceRoot":"","sourcesContent":["import { Http, Response, Request } from '@angular/http';\n\nimport {\n  Output,\n  EventEmitter,\n  Input,\n  Component\n} from '@angular/core'\nimport { AppData } from \"./AppData\"\nimport { string as rjonTester } from \"./templates/rjon-tester.pug\"\nimport { Tester } from \"./rjonTester\"\nimport { fxArray } from \"./prefx\"\n\n\n@Component({\n  selector:'rjon-tester',\n  template:rjonTester,\n  animations:fxArray\n}) export class RjonTester{\n  public error\n  public testlog = []\n  public testing:boolean = false\n  //public testResults = []\n  public hostModel\n  public myTester = new Tester()\n  \n  @Input() public testRoutes = []\n  @Output() public testRoutesChange = new EventEmitter()\n  \n  @Input() public actualRoutes = []\n  @Output() public actualRoutesChange = new EventEmitter()\n  \n  @Input() public actualTestRoutes = []\n  @Output() public actualTestRoutesChange = new EventEmitter()\n\n  @Input() public hostModelChange = new EventEmitter()\n\n  @Input() public ref\n  @Output() public refChange = new EventEmitter()\n\n  constructor(public AppData:AppData, public http:Http){\n    this.myTester.log = options=>this.testlog.push(options)\n\n    this.myTester.requestSampleRoute = (sample, route, options)=>{\n      options = options || {}\n      options.host = options.host || 'localhost'\n\n      const simplePath = Tester.getRouteSamplePath(route, sample)\n      const protocol = this.hostModel.protcol || (this.hostModel.port==443?'https':'http')\n      const url = protocol + '://'+this.hostModel.hostname+':'+this.hostModel.port + simplePath\n      const reqops = {\n        method : route.method || 'GET'\n        ,body: sample.request || sample.post\n      }\n\n      //send request\n      return this.http.request(url, reqops).toPromise()\n      .then(response=>this.parseResponse(response))\n      .catch( response=>Promise.reject(this.parseResponse(response)) )\n    }\n\n  }\n\n  ngAfterViewInit(){\n    setTimeout(()=>{\n      //this.ref = Object.assign(this.ref||this,this)&&this\n      this.ref = Object.assign(this,this.ref)\n      this.refChange.emit(this.ref)\n    }, 0)\n  }\n\n  parseResponse(response){\n    if(response['data'])return response\n\n    if( response.headers.get('Content-Type')=='application/json' ){\n      try{\n        response['data'] = JSON.parse( response.body || response._body )\n      }catch(e){}\n    }\n\n    return response\n  }\n\n  ngOnInit(){\n    return this.AppData.load.then(()=>{\n      if(!this.AppData.rjon || !this.AppData.rjon.routes)return\n      //routes with tests\n      this.testRoutes = Tester.getRouteTests( this.AppData.rjon.routes )\n      \n      //unique tests\n      this.actualTestRoutes = Tester.getRouteActualTests( this.AppData.rjon.routes )\n      \n      //unique routes with ready to use tests\n      this.actualRoutes = Tester.getRoutesWithActualTests( this.AppData.rjon.routes )\n\n      this.testRoutesChange.emit(this.testRoutes)\n      this.actualRoutesChange.emit(this.actualTestRoutes)\n      this.actualTestRoutesChange.emit(this.actualRoutes)\n\n\n      this.hostModel = this.getDefaultHostModel()\n    })\n  }\n\n  getDefaultHostModel(){\n    if(this.hostModel)return this.hostModel\n    \n    if(this.AppData.rjon.hosts && this.AppData.rjon.hosts.length){\n      return this.AppData.rjon.hosts[0]\n    }\n  }\n\n  setHostByIndex(index){\n    this.hostModel = this.AppData.rjon.hosts[index]\n    this.hostModelChange.emit(this.hostModel)\n  }\n\n  runTest(){\n    if(this.testing)return\n\n    this.testlog.length = 0\n    this.testing = true\n\n    return this.myTester.testRoutes(this.AppData.rjon.routes, this.hostModel)\n    //.then( results=>this.testResults=results )\n    //.then( results=>console.log('results',results) )\n    .catch( e=>console.log(this.error=e) )\n    .then( ()=>this.testing=false )\n  }\n}\n"]}