{"version":3,"sources":["../src/rjonHelper.ts"],"names":[],"mappings":";;AAAA,6CAA2C;AAAlC,oCAAA,WAAW,CAAA;AACpB,6CAA2C;AAC3C,uDAA+C;AAE/C,0BAAiC,IAAI,EAAE,KAAK,EAAE,MAAM;IAClD,IAAI,SAAS,GAAG,KAAK,CAAC,IAAI,CAAA;IAE1B,EAAE,CAAA,CAAC,MAAM,CAAC,CAAA,CAAC;QACT,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,CAAC;YACd,SAAS,GAAG,MAAM,CAAC,IAAI,CAAA;QACzB,CAAC;QAED,EAAE,CAAA,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,CAAC;YAChB,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAA;YAC1B,GAAG,CAAA,CAAC,IAAI,cAAc,IAAI,MAAM,CAAC,CAAA,CAAC;gBAChC,IAAI,EAAE,GAAG,IAAI,MAAM,CAAC,GAAG,GAAC,cAAc,EAAE,IAAI,CAAC,CAAA;gBAC7C,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC,CAAA;YAC3D,CAAC;QACH,CAAC;QAED,EAAE,CAAA,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA,CAAC;YACf,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAA;YACxB,SAAS,IAAI,GAAG,CAAA;YAChB,GAAG,CAAA,CAAC,IAAI,QAAQ,IAAI,KAAK,CAAC,CAAA,CAAC;gBACzB,SAAS,IAAI,QAAQ,GAAC,GAAG,GAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAA;YACjD,CAAC;YAED,eAAe;YACf,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAA;QACxD,CAAC;IACH,CAAC;IAED,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE,CAAA;IAC5B,IAAM,OAAO,GAAG,SAAS,GAAC,IAAI,CAAC,QAAQ,GAAC,GAAG,GAAC,IAAI,CAAA;IAChD,IAAM,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,CAAA;IACvD,MAAM,CAAC,OAAO,GAAC,GAAG,GAAC,SAAS,CAAA;AAC9B,CAAC;AAhCD,4CAgCC;AAED,oBAA2B,MAAM;IAC/B,IAAM,OAAO,GAAG,MAAM,IAAI,MAAM,CAAC,WAAW,IAAE,QAAQ,GAAG,MAAM,EAAE,GAAG,CAAC,MAAM,IAAE,EAAE,CAAC,CAAA;IAChF,MAAM,CAAC,OAAO,CAAC,WAAW,IAAI,KAAK,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,CAAA;AAC3D,CAAC;AAHD,gCAGC;AAED,8BAAqC,MAAM;IACzC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;AAC3B,CAAC;AAFD,oDAEC;AAED,wBAA+B,IAAI;IACjC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;IACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAA;IAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAA;IAC/B,IAAM,YAAY,GAAG,EAAE,CAAA;IAEvB,IAAI,MAAM,GAAG,sBAAsB;QACnC,uBAAuB;QACvB,iBAAiB,CAAA;IAEjB,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC;QACvC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACxB,MAAM,IAAI,OAAK,IAAI,CAAC,QAAQ,WAAM,IAAI,CAAC,IAAI,SAAM,CAAA;IACnD,CAAC;IACD,MAAM,IAAI,IAAI,CAAA;IAEd,MAAM,IAAI,uBAAuB;QACjC,uCAAuC;QACvC,6BAA6B,CAAA;IAE7B,IAAI,KAA6F,CAAA;IACjG,GAAG,CAAA,CAAC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC;QACxC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QACtB,IAAI,IAAI,GAAG,mBAAK,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,GAAC,GAAG,GAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAE5D,MAAM,IAAI,OAAK,KAAK,CAAC,MAAM,YAAO,KAAK,CAAC,IAAI,WAAM,IAAI,aAAO,KAAK,CAAC,UAAU,IAAE,EAAE,SAAK,CAAA;QAEtF,EAAE,CAAA,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA,CAAC;YACf,EAAE,CAAA,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,CAAC;gBACvB,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,MAAM;oBACzB,OAAA,MAAM,IAAI,yBAAW,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,yBAAW,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,MAAM;gBAAtE,CAAsE,CACvE,CAAA;YACH,CAAC;YAAA,IAAI,CAAA,CAAC;gBACJ,MAAM,IAAI,yBAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,yBAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,CAAA;YAC1F,CAAC;QACH,CAAC;QACD,MAAM,IAAI,KAAK,CAAA;IACjB,CAAC;IAED,MAAM,IAAI,MAAM,CAAA;IAChB,MAAM,IAAI,0BAA0B,CAAA;4BAE5B,MAAM;QACZ,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QAC3B,MAAM,IAAI,UAAQ,KAAK,CAAC,MAAM,GAAC,GAAG,GAAC,KAAK,CAAC,IAAI,QAAK,CAAA;QAElD,EAAE,CAAA,CAAE,KAAK,CAAC,MAAO,CAAC,CAAA,CAAC;YACjB,EAAE,CAAA,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,CAAC;gBACvB,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,MAAM;oBACzB,OAAA,MAAM,IAAI,IAAI,GAAG,yBAAW,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,yBAAW,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,MAAM,GAAG,IAAI;gBAApF,CAAoF,CACrF,CAAA;YACH,CAAC;YAAA,IAAI,CAAA,CAAC;gBACJ,MAAM,IAAI,IAAI,GAAG,yBAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,yBAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,IAAI,CAAA;YACxG,CAAC;QACH,CAAC;QAED,2DAA2D;QAC3D,EAAE,CAAA,CAAC,KAAK,CAAC,UAAU,CAAC;YAAA,MAAM,IAAI,oBAAmB,KAAK,CAAC,UAAU,OAAK,CAAA;QACtE,EAAE,CAAA,CAAC,KAAK,CAAC,OAAO,CAAC;YAAA,MAAM,IAAI,OAAM,KAAK,CAAC,OAAO,OAAK,CAAA;QAEnD,IAAI,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QAChD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YACrB,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gBACpB,IAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;gBACpD,MAAM,IAAI,QAAM,IAAI,CAAC,QAAQ,UAAK,MAAM,QAAK,CAAA;YAC/C,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACpB,EAAE,CAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,CAAC;gBACd,IAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;gBACrC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAC,CAAC;oBACnB,IAAM,SAAS,GAAG,cAAc,GAAC,CAAC,GAAC,IAAI,GAAG,KAAK,CAAC,MAAM,GAAC,IAAI,GAAC,KAAK,CAAC,IAAI,CAAA;oBACtE,IAAM,gBAAgB,GAAG,mBAAK,CAAC,cAAc,CAAC,SAAS,CAAC,CAAA;oBACxD,MAAM,IAAI,uBAAqB,gBAAgB,QAAK,CAAA;oBACpD,IAAI,MAAM,GAAG,2BAAyB,IAAI,CAAC,UAAU,OAAI,CAAA;oBACzD,MAAM,IAAI,kCAAkC,GAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAC,SAAS,CAAA;oBACzF,YAAY,CAAC,IAAI,CAAC;wBAChB,KAAK,EAAI,SAAS;wBAClB,KAAK,EAAI,KAAK;wBACd,MAAM,EAAG,MAAM;qBAChB,CAAC,CAAA;gBACJ,CAAC,CAAC,CAAA;YACJ,CAAC;YAED,EAAE,CAAA,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA,CAAC;gBAClB,IAAM,aAAa,GAAG,mBAAmB,GAAG,KAAK,CAAC,MAAM,GAAC,IAAI,GAAC,KAAK,CAAC,IAAI,CAAA;gBACxE,IAAM,kBAAkB,GAAG,mBAAK,CAAC,cAAc,CAAC,aAAa,CAAC,CAAA;gBAC9D,MAAM,IAAI,2BAAyB,kBAAkB,QAAK,CAAA;gBAC1D,YAAY,CAAC,IAAI,CAAC;oBAChB,KAAK,EAAI,aAAa;oBACtB,KAAK,EAAI,KAAK;oBACd,MAAM,EAAG,iBAAiB,GAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,GAAC,SAAS;iBAC9E,CAAC,CAAA;YACJ,CAAC;YAED,EAAE,CAAA,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,CAAC;gBACjB,IAAM,YAAY,GAAG,kBAAkB,GAAG,KAAK,CAAC,MAAM,GAAC,IAAI,GAAC,KAAK,CAAC,IAAI,CAAA;gBACtE,IAAM,iBAAiB,GAAG,mBAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;gBAC5D,MAAM,IAAI,0BAAwB,iBAAiB,QAAK,CAAA;gBACxD,YAAY,CAAC,IAAI,CAAC;oBAChB,KAAK,EAAI,YAAY;oBACrB,KAAK,EAAI,KAAK;oBACd,MAAM,EAAG,iBAAiB,GAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,GAAC,SAAS;iBAC7E,CAAC,CAAA;YACJ,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,MAAM,IAAI,IAAI,CAAA;IAChB,CAAC;IAnED,GAAG,CAAA,CAAC,IAAI,MAAM,GAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,MAAM;gBAA/C,MAAM;KAmEb;IAED,EAAE,CAAA,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA,CAAC;QACtB,MAAM,IAAI,iCAAiC,CAAA;QAC3C,GAAG,CAAA,CAAC,IAAI,OAAO,GAAC,CAAC,EAAE,OAAO,GAAG,YAAY,CAAC,MAAM,EAAE,EAAE,OAAO,EAAC,CAAC;YAC3D,IAAI,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,CAAA;YAClC,MAAM,IAAI,SAAO,MAAM,CAAC,KAAK,OAAI,CAAA;YACjC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAA;YACvB,MAAM,IAAI,SAAS,CAAA;QACrB,CAAC;IACH,CAAC;IAED,MAAM,IAAI,MAAM,CAAA;IAChB,MAAM,IAAI,mCAAmC,CAAA;IAE7C,EAAE,CAAA,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA,CAAC;QACtB,MAAM,GAAG,6DAA6D,GAAG,MAAM,CAAA;IACjF,CAAC;IAAA,IAAI,CAAA,CAAC;QACJ,MAAM,GAAG,MAAM,GAAG,MAAM,CAAA;IAC1B,CAAC;IAED,MAAM,GAAG,yBAAyB;QAClC,uCAAuC;QACvC,yCAAyC;QACzC,6CAA6C,GAAG,MAAM,CAAA;IAEtD,MAAM,CAAC,MAAM,CAAA;AACf,CAAC;AAxID,wCAwIC","file":"rjonHelper.js","sourceRoot":"","sourcesContent":["export { statIconMap } from \"./statIconMap\"\nimport { statIconMap } from \"./statIconMap\"\nimport { pipes } from \"ack-angular/pipes.class\"\n\nexport function serverUrlByRoute(host, route, sample){\n  var routePath = route.path\n\n  if(sample){\n    if(sample.path){\n      routePath = sample.path\n    }\n\n    if(sample.params){\n      var params = sample.params\n      for(var sampleParamKey in params){\n        var rx = new RegExp(':'+sampleParamKey, 'gi')\n        routePath = routePath.replace(rx, params[sampleParamKey])\n      }\n    }\n\n    if(sample.query){\n      var query = sample.query\n      routePath += '?'\n      for(var queryKey in query){\n        routePath += queryKey+'='+query[queryKey] + '&'\n      }\n\n      //remove last &\n      routePath = routePath.substring(0, routePath.length-1)\n    }\n  }\n\n  const port = host.port || 80\n  const address = 'http://'+host.hostname+':'+port\n  const sep = routePath.substring(0, 1) == '/' ? '' : '/'\n  return address+sep+routePath\n}\n\nexport function defToArray(sample){\n  const samples = sample && sample.constructor==Function ? sample() : (sample||[])\n  return samples.constructor == Array ? samples : [samples]  \n}\n\nexport function rjonSampleDefToArray(sample){\n  return defToArray(sample)\n}\n\nexport function rjonToMarkdown(rjon){\n  rjon = rjon || {}\n  rjon.hosts = rjon.hosts || []\n  rjon.routes = rjon.routes || []\n  const largeSamples = []\n\n  let output = '### Table of Hosts\\n'+\n  '| HOSTNAME | PORT |\\n'+\n  '| --- | --- |\\n'\n\n  for(let x=0; x < rjon.hosts.length; ++x){\n    let host = rjon.hosts[x]\n    output += `| ${host.hostname} | ${host.port} |\\n`\n  }\n  output += '\\n'\n\n  output += '### Table of Routes\\n'+\n  '| METHOD | ROUTE | RETURNS | STAT |\\n'+\n  '| --- | --- | --- | --- |\\n'\n\n  let route:{path:string, method:string, returnType:string, status:any, details:string, sample:any}\n  for(let x=0; x < rjon.routes.length; ++x){\n    route = rjon.routes[x]\n    let link = pipes.markdownAnchor(route.method+' '+route.path)\n\n    output += `| ${route.method} | [${route.path}](#${link}) | ${route.returnType||''} | `\n\n    if(route.status){\n      if(route.status.forEach){\n        route.status.forEach(status=>\n          output += statIconMap[status].icon ? statIconMap[status].icon : status\n        )\n      }else{\n        output += statIconMap[route.status].icon ? statIconMap[route.status].icon : route.status\n      }\n    }\n    output += '|\\n'\n  }\n\n  output += '\\n\\n'\n  output += '## Route Definitions\\n\\n'\n\n  for(let xRoute=0; xRoute < rjon.routes.length; ++xRoute){\n    route = rjon.routes[xRoute]\n    output += `### ${ route.method+' '+route.path }\\n`\n\n    if( route.status ){\n      if(route.status.forEach){\n        route.status.forEach(status=>\n          output += '- ' + statIconMap[status].icon ? statIconMap[status].icon : status + '\\n'\n        )\n      }else{\n        output += '- ' + statIconMap[route.status].icon ? statIconMap[route.status].icon : route.status + '\\n'\n      }\n    }\n\n    //if(route.method)output += `- method: ${ route.method }\\n`\n    if(route.returnType)output += `- return-type: ${ route.returnType }\\n`\n    if(route.details)output += `- ${ route.details }\\n`\n\n    let sampler = rjonSampleDefToArray(route.sample)\n    rjon.hosts.forEach(host=>{\n      sampler.forEach(sample=>{\n        const action = serverUrlByRoute(host, route, sample)\n        output += `- [${host.hostname}](${action})\\n`\n      })\n    })\n\n    sampler.forEach(sample=>{\n      if(sample.test){\n        const tests = defToArray(sample.test)\n        tests.forEach((test,i)=>{\n          const testLabel = 'Sample Test '+i+': ' + route.method+': '+route.path\n          const responseTestName = pipes.markdownAnchor(testLabel)\n          output += `- Sample: [test](#${responseTestName})\\n`\n          let string = `- Expects statusCode: ${test.statusCode}\\n`\n          string += '- Request Body:\\n```javascript\\n'+JSON.stringify(test.body, null, 2)+'\\n```\\n'\n          largeSamples.push({\n            label  : testLabel,\n            route  : route,\n            string : string\n          })\n        })\n      }\n\n      if(sample.response){\n        const responseLabel = 'Sample Response: ' + route.method+': '+route.path\n        const responseSampleName = pipes.markdownAnchor(responseLabel)\n        output += `- Sample: [response](#${responseSampleName})\\n`\n        largeSamples.push({\n          label  : responseLabel,\n          route  : route,\n          string : '```javascript\\n'+JSON.stringify(sample.response, null, 2)+'\\n```\\n',\n        })\n      }\n\n      if(sample.request){\n        const requestLabel = 'Sample Request: ' + route.method+': '+route.path\n        const requestSampleName = pipes.markdownAnchor(requestLabel)\n        output += `- Sample: [request](#${requestSampleName})\\n`\n        largeSamples.push({\n          label  : requestLabel,\n          route  : route,\n          string : '```javascript\\n'+JSON.stringify(sample.request, null, 2)+'\\n```\\n',\n        })\n      }\n    })\n\n    output += '\\n'\n  }\n\n  if(largeSamples.length){\n    output += '## Request Response Samples\\n\\n'\n    for(let xSample=0; xSample < largeSamples.length; ++xSample){\n      let sample = largeSamples[xSample]\n      output += `### ${sample.label}\\n`\n      output += sample.string\n      output += '```\\n\\n'\n    }\n  }\n\n  output += `\\n\\n`\n  output += `[back to top](#table-of-contents)`\n\n  if(largeSamples.length){\n    output = \"- [Request Response Samples](#request-response-samples)\\n\\n\" + output\n  }else{\n    output = \"\\n\\n\" + output\n  }\n\n  output = '### Table of Contents\\n'+\n  '- [Table of Hosts](#table-of-hosts)\\n'+\n  '- [Table of Routes](#table-of-routes)\\n'+\n  '- [Route Definitions](#route-definitions)\\n' + output\n  \n  return output\n}"]}